■第4章の解答：目次■
･････････････････････
第4章：前章の理解度チェック
4.1：練習問題
4.2：練習問題
4.3：練習問題
4.4：練習問題
4.5：練習問題
4.6：練習問題
4.7：練習問題
4.8：練習問題
4.9：練習問題
第4章の理解度チェック
第4章：総合理解度チェック
･････････････････････

第4章：前章の理解度チェック

【1】1つのオブジェクトを同じ型の別のオブジェクトに代入すると、右辺のオブジェクトのすべてのデータメンバ現在値が左辺のオブジェクトの対応するデータメンバに代入されます。

【2】1つのオブジェクトを別のオブジェクトに代入すると、それによって左辺のオブジェクト内にある既存の重要なデータが上書きされ、問題が発生することがあります。たとえば、動的メモリや開いているファイルを指すポインタが上書きされ、失われる可能性があります。

【3】関数にオブジェクトを渡すと、オブジェクトのコピーが作成されます。ただし、コピーオブジェクトのコンストラクタ関数は呼び出されません。関数の終了時にオブジェクトを破棄する際には、コピーオブジェクトのデストラクタが呼び出されます。

【4】オブジェクトを仮引数として渡す際、引数に指定したオブジェクトとそのコピーとの区別が失われる状況は何とおりかあります。たとえば、デストラクタによって動的メモリを解放した場合、引数に指定したオブジェクトのメモリも解放されます。一般に、引数に指定した元のオブジェクトで必要とされるデータがデストラクタ関数によって破壊されると、元のオブジェクトに被害が及びます。

【5】
#include <iostream>
using namespace std;

class summation {
  int num;
  long sum; // 数値の総計
public:
  void set_sum(int n);
  void show_sum() {
    cout << num << " 総計は " << sum << "\n";
  }
};
void summation::set_sum(int n)
{
  int i;

  num = n;

  sum = 0;
  for(i=1; i<=n; i++)
    sum += i;
}

summation make_sum()
{
  int i;
  summation temp;

  cout << "数字を入力する: ";
  cin >> i;

  temp.set_sum(i);

  return temp;
}

int main()
{
  summation s;
 
  s = make_sum();

  s.show_sum();

  return 0;
}

【6】一部のコンパイラでは、インライン関数にループを含めることはできません。

【7】
#include <iostream>
using namespace std;

class myclass {
  int num;
public:
  myclass(int x) { num = x; }
  friend int isneg(myclass ob);
};

int isneg(myclass ob)
{
  return (ob.num < 0) ? 1 : 0;
}

int main()
{
  myclass a(-1), b(2);

  cout << isneg(a) << ' ' << isneg(b);
  cout << "\n";

  return 0;
}

【8】フレンド関数は複数のクラスのフレンドとすることができます。

4.1：練習問題

【1】
#include <iostream>
using namespace std;

class letters {
  char ch;
public:
  letters(char c) { ch = c; }
  char get_ch() { return ch; }
};

int main()
{
  letters ob[10] = { 'A', 'B', 'C','D', 'E', 'F', 
                     'G', 'H', 'I', 'J' };

  int i;

  for(i=0; i<10; i++) 
    cout << ob[i].get_ch() << ' ';

  cout << "\n";

  return 0;
}

【2】
#include <iostream>
using namespace std;

class squares {
  int num, sqr;
public:
  squares(int a, int b) { num = a; sqr = b; }
  void show() {cout << num << ' ' << sqr << "\n"; }
};

int main()
{
  squares ob[10] = {
    squares(1, 1),
    squares(2, 4),
    squares(3, 9),
    squares(4, 16),
    squares(5, 25),
    squares(6, 36),
    squares(7, 49),
    squares(8, 64),
    squares(9, 81),
    squares(10, 100)
  };
  int i;

  for(i=0; i<10; i++) ob[i].show();

  return 0;
}

【3】
#include <iostream>
using namespace std;

class letters {
  char ch;
public:
  letters(char c) { ch = c; }
  char get_ch() { return ch; }
};

int main()
{
  letters ob[10] = { 
    letters('A'), 
    letters('B'), 
    letters('C'), 
    letters('D'), 
    letters('E'), 
    letters('F'), 
    letters('G'), 
    letters('H'), 
    letters('I'), 
    letters('J')
  };

  int i;

  for(i=0; i<10; i++) 
    cout << ob[i].get_ch() << ' ';

  cout << "\n";

  return 0;
}

4.2：練習問題

【1】
// 逆順に表示する
#include <iostream>
using namespace std;

class samp {
  int a, b;
public:
  samp(int n, int m) { a = n; b = m; }
  int get_a() { return a; }
  int get_b() { return b; }
};

int main()
{
  samp ob[4] = {
    samp(1, 2), 
    samp(3, 4), 
    samp(5, 6), 
    samp(7, 8)
  }; 
  int i;

  samp *p;

  p = &ob[3]; // 最後の要素のアドレスを取得する

  for(i=0; i<4; i++) {
    cout << p->get_a() << ' ';
    cout << p->get_b() << "\n";
    p--;      // 前のオブジェクトに進む
  }

  cout << "\n";

  return 0;
}

【2】
/* オブジェクトの2次元配列を作成する
   ポインタを使用してアクセスする */
#include <iostream>
using namespace std;

class samp {
  int a;
public:
  samp(int n) { a = n; }
  int get_a() { return a; }
};

int main()
{
  samp ob[4][2] = {
    1, 2,
    3, 4,
    5, 6,
    7, 8
  };
  int i;

  samp *p;

  p = (samp *) ob;
   for(i=0; i<4; i++) {
     cout << p->get_a() << ' ';
     p++;
     cout << p->get_a() << "\n";
     p++;
  }

  cout << "\n";

  return 0;
}

4.3：練習問題

【1】
// thisポインタを使用する
#include <iostream>
using namespace std;

class myclass {
  int a, b;
public: 
  myclass(int n, int m) { this->a = n; this->b = m; }
  int add() { return this->a + this->b; }
  void show();
};

void myclass::show()
{
  int t;

  t = this->add(); // メンバ関数を呼び出す
  cout << t << "\n";
}

int main()
{
  myclass ob(10, 14);

  ob.show();

  return 0;
}

4.4：練習問題

【1】
#include <iostream>
using namespace std;

int main()
{
  float *f;
  long *l;
  char *c;

  f = new float;
  l = new long;
  c = new char;

  if(!f || !l || !c) {
    cout << "メモリ割り当てエラー\n";
    return 1;
  }

  *f = 10.102;
  *l = 100000;
  *c = 'A';

  cout << *f << ' ' << *l << ' ' << *c;
  cout << "\n";
 
  delete f; delete l; delete c;

  return 0;
}

【2】
#include <iostream>
#include <cstring>
using namespace std;

class phone {
  char name[40];
  char number[14];
public:
  void store(char *n, char *num);
  void show();
};

void phone::store(char *n, char *num)
{
  strcpy(name, n);
  strcpy(number, num);
}

void phone::show()
{
  cout << name << ": " << number;
  cout << "\n";
}

int main()
{
  phone *p;

  p = new phone;

  if(!p) {
    cout << "メモリ割り当てエラー\n";
    return 1;
  }

  p->store("Isaac Newton", "111 555-2323");

  p->show();

  delete p;

  return 0;
}

【3】new演算子が失敗すると、ヌルポインタを返すか例外を生成します。どちらの処置が実行されるかは、使用するコンパイラのマニュアルで調べなければなりません。標準C++では、new演算子はデフォルトで例外を生成します。

4.5：練習問題

【1】
char *p;

p = new char [100];
// ...
strcpy(p, "This is a test");

【2】
#include <iostream>
using namespace std;

int main()
{
  double *p;

  p = new double (-123.099);

  cout << *p << "\n";

  return 0;
}

4.6：練習問題

【1】
#include <iostream>
using namespace std;

void rneg(int &i); // 参照を使用する
void pneg(int *i); // ポインタを使用する

int main()
{
  int i = 10;
  int j = 20;

  rneg(i);
  pneg(&j);

  cout << i << ' ' << j << "\n";

  return 0;
}

// 参照仮引数を使用する
void rneg(int &i)
{  
  i = -i;
}
// ポインタ仮引数を使用する
void pneg(int *i)
{
  *i = - *i;
}

【2】triple()関数を呼び出すときに、&演算子によってdのアドレスを明示的に取得しています。これは不要であり、誤りです。参照仮引数を使用する場合は、引数に&演算子を付けません。

【3】参照仮引数のアドレスは、関数に自動的に渡されます。アドレスを手作業で取得する必要はありません。参照呼び出しを使用すると、一般には値呼び出しよりも処理速度が速くなります。引数のコピーは作成されません。したがって、コピーオブジェクトのデストラクタが呼び出されることによる副作用の心配はありません。

4.7：練習問題

【1】元のプログラムでは、オブジェクトをshow()関数に値によって渡しています。したがってオブジェクトのコピーが作成されます。show()関数が終了すると、コピーオブジェクトが破棄されてデストラクタが呼び出されます。これによってpが解放されますが、pが指すメモリはshow()関数の引数でまだ必要とされます。次のプログラムは、このプログラムを修正し、参照仮引数を使用して、関数の呼び出し時にコピーオブジェクトが作成されないようにしたものです。
 
// 修正したプログラム
#include <iostream>
#include <cstring>
#include <cstdlib>
using namespace std;

class strtype {
  char *p;
public:
  strtype(char *s);
  ~strtype() { delete [] p; }
  char *get() { return p; }
};

strtype::strtype(char *s)
{
  int l;

  l = strlen(s)+1;

  p = new char [l];
  if(!p) {
    cout << "メモリ割り当てエラー\n";
    exit(1);
  }

  strcpy(p, s);
}

// 参照仮引数を使用して修正する
void show(strtype &x)
{
  char *s;
   
  s = x.get();
  cout << s << "\n";
}

int main()
{
  strtype a("Hello"), b("There");

  show(a);
  show(b);

  return 0;
}

4.8：練習問題

【1】
// 単純な境界付き2次元配列の例
#include <iostream>
#include <cstdlib>
using namespace std;

class array {
  int isize, jsize;
  int *p;
public:
  array(int i, int j);
  int &put(int i, int j);
  int get(int i, int j);
};

array::array(int i, int j)
{
  p = new int [i*j];
  if(!p) {
    cout << "メモリ割り当てエラー\n";
    exit(1);
  }
  isize = i;
  jsize = j;
}

// 配列にデータを格納する
int &array::put(int i, int j)
{
  if(i<0 || i>=isize || j<0 || j>=jsize) {
    cout << "境界エラー!!!\n";
    exit(1);
  }
  return p[i*jsize + j];  // p[i]への参照を返す
}

// 配列からデータを取得する
int array::get(int i, int j)
{
  if(i<0 || i>=isize || j<0 || j>=jsize) {
    cout << "境界エラー!!!\n";
    exit(1);
  }
  return p[i*jsize +j];   // 文字を返す
}
  
int main()
{
  array a(2, 3);
  int i, j;

  for(i=0; i<2; i++)
    for(j=0; j<3; j++)
      a.put(i, j) = i+j;

  for(i=0; i<2; i++)
    for(j=0; j<3; j++)
      cout << a.get(i, j) << ' ';

  // 境界外エラーを生成する
  a.put(10, 10);

  return 0;
}

【2】正しくありません。関数から返される参照をポインタに代入することはできません。

4.9：練習問題

【1】（省略）

第4章の理解度チェック

【1】
#include <iostream>
using namespace std;

class a_type {
  double a, b;
public:
  a_type(double x, double y) {
    a = x;
    b = y;
  }
  void show() { cout << a << ' ' << b << "\n"; }
};

int main()
{
  a_type ob[2][5] = {
    a_type(1, 1), a_type(2, 2),
    a_type(3, 3), a_type(4, 4),
    a_type(5, 5), a_type(6, 6),
    a_type(7, 7), a_type(8, 8),
    a_type(9, 9), a_type(10, 10)
  };

  int i, j;

  for(i=0; i<2; i++)
    for(j=0; j<5; j++)
      ob[i][j].show();

  cout << "\n";

  return 0;
}

【2】
#include <iostream>
using namespace std;

class a_type {
  double a, b;
public:
  a_type(double x, double y) {
    a = x;
    b = y;
  }
  void show() { cout << a << ' ' << b << "\n"; }
};

int main()
{
  a_type ob[2][5] = {
    a_type(1, 1), a_type(2, 2),
    a_type(3, 3), a_type(4, 4),
    a_type(5, 5), a_type(6, 6),
    a_type(7, 7), a_type(8, 8),
    a_type(9, 9), a_type(10, 10)
  };
  a_type *p;

  p = (a_type *) ob;

  int i, j;

  for(i=0; i<2; i++)
    for(j=0; j<5; j++) {
      p->show();
      p++;
    }

  cout << "\n";

  return 0;
}

【3】thisポインタはメンバ関数に自動的に渡されるポインタで、関数を呼び出したオブジェクトを指します。

【4】new演算子とdelete演算子の一般形式は次のとおりです。

p-var = new type;
delete p-var ;

	new演算子を使うときは、型キャストを行う必要はありません。オブジェクトのサイズは自動的に判別されるので、sizeofを使用する必要はありません。また、プログラムに<cstdlib>をインクルードする必要はありません。

【5】参照とは、基本的には暗黙的なポインタ定数のことで、実質的にはほかの変数または引数の別名として使うことができます。参照仮引数を使う利点として、引数のコピーが作成されないということが挙げられます。

【6】
#include <iostream>
using namespace std;

void recip(double &d);

int main()
{
  double x = 100.0;

  cout << "xは " << x << "\n";

  recip(x);

  cout << "逆数は " << x << "\n";

  return 0;
}

void recip(double &d)
{
  d = 1/d;
}

第4章：総合理解度チェック

【1】ポインタを使ってオブジェクトのメンバにアクセスするには、アロー（->）演算子を使います。

【2】
#include <iostream>
#include <cstring>
#include <cstdlib>
using namespace std;

class strtype {
  char *p;
  int len;
public:
  strtype(char *ptr);
  ~strtype();
  void show();
};

strtype::strtype(char *ptr)
{
  len = strlen(ptr);
  p = new char [len+1];
  if(!p) {
    cout << "メモリ割り当てエラー\n";
    exit(1);
  }
  strcpy(p, ptr);
}
strtype::~strtype()
{
  cout << "pを解放する\n";
  delete [] p;
}

void strtype::show()
{
  cout << p << " - 長さ: " << len;
  cout << "\n";
}

int main()
{
  strtype s1("This is a test."), s2("I like C++.");

  s1.show();
  s2.show();

  return 0;
}

【3】（省略）
