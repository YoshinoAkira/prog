■第9章の解答：目次■
･････････････････････
第9章：前章の理解度チェック
9.1：練習問題
9.2：練習問題
9.3：練習問題
9.4：練習問題
9.5：練習問題
9.6：練習問題
9.7：練習問題
第9章の理解度チェック
第9章：総合理解度チェック
･････････････････････

第9章：前章の理解度チェック

【1】
#include <iostream>
using namespace std;

int main()
{
  cout.width(40);
  cout.fill(':');

  cout << "C++ is fun" << "\n";

  return 0;
}

【2】
#include <iostream>
using namespace std;

int main()
{
  cout.precision(4);
  cout << 10.0/3.0 << "\n";

  return 0;
}

【3】
#include <iostream>
#include <iomanip>
using namespace std;

int main()
{
  cout << setprecision(4) << 10.0/3.0 << "\n";

  return 0;
}

【4】挿入子とは、オーバーロードされたoperator<<()関数です。クラスのデータを出力ストリームに出力します。抽出子とは、オーバーロードされたoperator>>()関数です。クラスのデータを入力ストリームから入力します。

【5】
#include <iostream>
using namespace std;

class date {
  char d[9]; // 日付をmm/dd/yyという文字列として格納する
public:
  friend ostream &operator<<(ostream &stream, date ob);
  friend istream &operator>>(istream &stream, date &ob);
};

ostream &operator<<(ostream &stream, date ob)
{
  stream << ob.d << "\n";

  return stream;
}

istream &operator>>(istream &stream, date &ob)
{ 
  cout << "日付を入力する (mm/dd/yy): ";
  stream >> ob.d;

  return stream;
}

int main()
{
  date ob;

  cin >> ob;
  cout << ob;

  return 0;
}

【6】パラメータをとるマニピュレータを使用するには、プログラムに<iomanip>をインクルードしなければなりません。

【7】cin、cout、cerr、clogの各定義済みストリームです。

9.1：練習問題

【1】
// 時刻と日付を示す
#include <iostream>
#include <ctime>
using namespace std;

// 時刻と日付の出力マニピュレータ
ostream &td(ostream &stream)
{
  struct tm *localt;
  time_t t;
  
  t = time(NULL);
  localt = localtime(&t);
  stream << asctime(localt) << endl;

  return stream;
}

int main()
{
  cout << td;

  return 0;
}

【2】
#include <iostream>
using namespace std;

// 16進出力をオンにし、Xを大文字にする
ostream &sethex(ostream &stream)
{
  stream.unsetf(ios::dec | ios::oct);
  stream.setf(ios::hex | ios::uppercase | 
              ios::showbase);
  return stream;
}

// フラグのリセット
ostream &reset(ostream &stream)
{
  stream.unsetf(ios::hex | ios::uppercase |
                ios::showbase);
  stream.setf(ios::dec);
  return stream;
}

int main()
{
  cout << sethex << 100 << "\n";
  cout << reset << 100 << "\n";

  return 0;
}

【3】
#include <iostream>
using namespace std;

// 10文字をスキップする
istream &skipchar(istream &stream)
{
  int i;
  char c;

  for(i=0; i<10; i++) stream >> c;

  return stream;
}

int main()
{
  char str[80];

  cout << "いくつかの文字を入力する: ";
  cin >> skipchar >> str;

  cout << str << "\n";

  return 0;
}

9.2：練習問題

【1】
// テキストファイルをコピーし、コピーした文字の数を表示する
#include <iostream>
#include <fstream>
using namespace std;

int main(int argc, char *argv[])
{
  if(argc!=3) {
    cout << "使い方: CPY <入力ファイル> <出力ファイル>\n";
    return 1;
  }

  ifstream fin(argv[1]);   // 入力ファイルのオープン
  ofstream fout(argv[2]);  // 出力ファイルの作成

  if(!fin) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  if(!fout) {
    cout << "出力ファイルが開けません\n";
    return 1;
  }

  char ch;
  unsigned count=0;

  fin.unsetf(ios::skipws); // スペースをスキップしない
  while(!fin.eof()) {
    fin >> ch;
    if(!fin.eof()) {
      fout << ch;
      count++;
    }
  }

  cout << "コピーしたバイト数: " << count << "\n";

  fin.close();
  fout.close();

  return 0;
}

このプログラムが表示する結果が、ディレクトリ中でファイルサイズとして示される値と異なるときは、文字変換が起こっていると考えられます。特に、キャリッジリターン/ラインフィード（CR/LF）文字列は、読み取られると改行に変換されます。出力時には、改行は1文字として数えられるものの、再びCR/LF文字列に変換し直されます。

【2】
#include <iostream>
#include <fstream>
using namespace std;

int main()
{
  ofstream pout("phone");

  if(!pout) {
    cout << "ファイルphoneが開けません\n";
    return 1;
  }

  pout << "Isaac Newton  415 555-3423\n";
  pout << "Robert Goddard 213 555-2312\n";
  pout << "Enrico Fermi  202 555-1111\n";

  pout.close();

  return 0;
}

【3】
// 語数
#include <iostream>
#include <fstream>
#include <cctype>
using namespace std;

int main(int argc, char *argv[])
{
  if(argc!=2) {
    cout << "使い方: COUNT <入力ファイル>\n";
    return 1;
  }

  ifstream in(argv[1]);

  if(!in) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  int count=0;
  char ch;

  in >> ch; // 最初の非スペース文字を見つける

   // 最初の非スペース文字を見つけてからは、スペースをスキップしない
  in.unsetf(ios::skipws); // スペースをスキップしない

  while(!in.eof()) {
    in >> ch;
    if(isspace(ch)) {
      count++;
      while(isspace(ch) && !in.eof()) in >> ch; 
    }
  }

  cout << "語数: " << count << "\n";

  in.close();

  return 0;
}

【4】is_open()関数は、呼び出しを行ったストリームがオープンファイルにリンクされているとき、真を返します。

9.3：練習問題
1a.
// ファイルをコピーし、コピーした文字の数を表示する
#include <iostream>
#include <fstream>
using namespace std;

int main(int argc, char *argv[])
{
  if(argc!=3) {
    cout << "使い方: CPY <入力ファイル> <出力ファイル>\n";
    return 1;
  }

  ifstream fin(argv[1], ios::in | ios::binary); 
// 入力ファイルをオープン
  ofstream fout(argv[2], ios::out | ios::binary); 
                                  // 出力ファイルを作成

  if(!fin) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  if(!fout) {
    cout << "出力ファイルが開けません\n";
    return 1;
  }

  char ch;
  unsigned count=0;

  while(!fin.eof()) {
    fin.get(ch);
    if(!fin.eof()) {
      fout.put(ch);
      count++;
    }
  }

  cout << "コピーしたバイト数: " << count << "\n";

  fin.close();
  fout.close();

  return 0;
}

1b.
// 語数
#include <iostream>
#include <fstream>
#include <cctype>
using namespace std;

int main(int argc, char *argv[])
{
  if(argc!=2) {
    cout << "使い方: COUNT <入力ファイル>\n";
    return 1;
  }

  ifstream in(argv[1], ios::in | ios::binary);

  if(!in) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  int count=0;
  char ch;

  // 最初の非スペース文字を見つける
  do {
    in.get(ch);
  } while(isspace(ch));

  while(!in.eof()) {
    in.get(ch);
    if(isspace(ch)) {
      count++;
      while(isspace(ch) && !in.eof()) in.get(ch); 
// 次の語を見つける
    }
 }

  cout << "語数: " << count << "\n";

  in.close();

  return 0;
}

【2】
// 挿入子を使って、account情報をファイルに出力する
#include <iostream>
#include <fstream>
#include <cstring>
using namespace std;

class account {
  int custnum;
  char name[80];
  double balance;
public:
  account(int c, char *n, double b) 
  {
    custnum = c;
    strcpy(name, n);
    balance = b;
  }
  friend ostream &operator<<(ostream &stream, account ob);
};

ostream &operator<<(ostream &stream, account ob) 
{
  stream << ob.custnum << ' ';
  stream << ob.name << ' ' << ob.balance;
  stream << "\n";

  return stream;
}

int main()
{
  account  Rex(1011, "Ralph Rex", 12323.4);
  ofstream out("accounts", ios::out | ios::binary);

  if(!out) {
    cout << "出力ファイルが開けません\n";
    return 1;
  }

  out << Rex;

  out.close();

  return 0;
}

9.4：練習問題

【1】
// get()を使用して、スペースを含む文字列を読み取る
#include <iostream>
#include <fstream>
using namespace std;

int main()
{ 
  char str[80];

  cout << "名前を入力する: ";
  cin.get(str, 79);

  cout << str << "\n";

  return 0;
}

このプログラムは、get()とgetline()のどちらを使用してもはたらきは変わりません。

【2】
// getline()を使用して、テキストファイルを表示する
#include <iostream>
#include <fstream>
using namespace std;

int main(int argc, char *argv[])
{
  if(argc!=2) {
    cout << "使い方: PR <ファイル名>\n";
    return 1;
  }

  ifstream in(argv[1]);

  if(!in) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  char str[255];

  while(!in.eof()) {
    in.getline(str, 254);
    cout << str << "\n";
  }

  in.close();

  return 0;
}

【3】本文の解説を参照。

9.5：練習問題

【1】
// ファイルを逆方向に画面に表示する
#include <iostream>
#include <fstream>
using namespace std;

int main(int argc, char *argv[])
{
  if(argc!=2) {
    cout << "使い方: REVERSE <ファイル名>\n";
    return 1;
  }

  ifstream in(argv[1], ios::in | ios::binary);

  if(!in) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  char ch;
  long i;

 // ファイルの終わり（eof文字の手前）に行く
  in.seekg(0, ios::end);
  i = (long) in.tellg(); // ファイルに何バイトあるか調べる
  i -= 2;                // eofの前まで後退

  for( ;i>=0; i--) {
    in.seekg(i, ios::beg);
    in.get(ch);
    cout << ch;
  }

  in.close();

  return 0;
}

【2】
// ファイル中の文字の入れ替え
#include <iostream>
#include <fstream>
using namespace std;

int main(int argc, char *argv[])
{
  if(argc!=2) {
    cout << "使い方: SWAP <ファイル名>\n";
    return 1;
  }

  // ファイルを入出力用にオープン
  fstream io(argv[1], ios::in | ios::out | ios::binary);
  if(!io) {
    cout << "ファイルが開けません\n";
    return 1;
  }

  char ch1, ch2;
  long i;

  for(i=0 ; !io.eof(); i+=2) {
    io.seekg(i, ios::beg);
    io.get(ch1);
    if(io.eof()) continue;
    io.get(ch2);
    if(io.eof()) continue;
    io.seekg(i, ios::beg);
    io.put(ch2);
    io.put(ch1);
  }

  io.close();

  return 0;
}

9.6：練習問題
1a.
/*ファイルを逆方向に画面に表示し、
エラー検査を追加する*/
#include <iostream>
#include <fstream>
using namespace std;

int main(int argc, char *argv[])
{
  if(argc!=2) {
    cout << "使い方: REVERSE <入力ファイル>\n";
    return 1;
  }

  ifstream in(argv[1], ios::in | ios::binary);

  if(!in) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  char ch;
  long i;

  // ファイルの終わり（eof文字の手前）に行く
  in.seekg(0, ios::end);
  if(!in.good()) return 1;
  i = (long) in.tellg(); // ファイルに何バイトあるか調べる
  if(!in.good()) return 1;
  i -= 2;                // eofの前まで後退

  for( ;i>=0; i--) {
    in.seekg(i, ios::beg);
    if(!in.good()) return 1;
    in.get(ch);
    if(!in.good()) return 1;
    cout << ch;
  }

  in.close();  
  if(!in.good()) return 1;

  return 0;
}

1b.
// ファイル中の文字を入れ替え、エラー検査を追加する
#include <iostream>
#include <fstream>
using namespace std;

int main(int argc, char *argv[])
{
  if(argc!=2) {
    cout << "使い方: SWAP <ファイル名>\n";
    return 1;
  }

  // ファイルを入出力用にオープン
  fstream io(argv[1], ios::in | ios::out | ios::binary);

  if(!io) {
    cout << "ファイルが開けません\n";
    return 1;
  }

  char ch1, ch2;
  long i;

  for(i=0 ;!io.eof(); i+=2) {
    io.seekg(i, ios::beg);
    if(!io.good()) return 1;
    io.get(ch1);
    if(io.eof()) continue;
    io.get(ch2);
    if(!io.good()) return 1;
    if(io.eof()) continue;
    io.seekg(i, ios::beg);
    if(!io.good()) return 1;
    io.put(ch2);
    if(!io.good()) return 1;
    io.put(ch1);
    if(!io.good()) return 1;
  }

  io.close();
  if(!io.good()) return 1;

  return 0;
}

9.7：練習問題

【1】（省略）

第9章の理解度チェック

【1】
#include <iostream>
using namespace std;

ostream &tabs(ostream &stream)
{
  stream << '\t' << '\t' << '\t';
  stream.width(20);

  return stream;
}

int main()
{
  cout << tabs << "テスト\n";

  return 0;
}

【2】
#include <iostream>
#include <cctype>
using namespace std;

istream &findalpha(istream &stream)
{
  char ch;

  do {
    stream.get(ch);
  } while(!isalpha(ch));
  stream.putback(ch);
  return stream;
}

int main()
{
  char str[80];

  cin >> findalpha >> str;
  cout << str << "\n";

  return 0;
}

【3】
// ファイルをコピーし、大文字小文字を反対にする
#include <iostream>
#include <fstream>
#include <cctype>
using namespace std;

int main(int argc, char *argv[])
{
  char ch;

  if(argc!=3) {
    cout << "使い方: COPYREV <入力ファイル> <出力ファイル>\n";
    return 1;
  }

  ifstream in(argv[1]);

  if(!in) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  ofstream out(argv[2]);

  if(!out) {
    cout << "出力ファイルが開けません\n";
    return 1;
  }

  while(!in.eof()) {
    ch = in.get();
    if(!in.eof()) {
      if(islower(ch)) ch = toupper(ch);
      else ch = tolower(ch);
      out.put(ch);
    }
  };

  in.close();
  out.close();

  return 0;
}

【4】
// 文字数を数える
#include <iostream>
#include <fstream>
#include <cctype>
using namespace std;

int alpha[26];

int main(int argc, char *argv[])
{
  char ch;

  if(argc!=2) {
    cout << "使い方: COUNT <入力ファイル>\n";
    return 1;
  }

  ifstream in(argv[1]);

  if(!in) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  // alpha[]の初期化
  int i;
  for(i=0; i<26; i++) alpha[i] = 0;

  while(!in.eof()) {
    ch = in.get();
    if(isalpha(ch)) {   // 文字が見つかったら、数に入れる
      ch = toupper(ch); // 正規化
      alpha[ch-'A']++;  // 'A'-'A' == 0, 'B'-'A' 
                        // == 1, など
    }
  };

  // 発生回数の表示
  for(i=0; i<26; i++) {
    cout << (char) ('A'+ i) << ": " << alpha[i] << "\n";
  }

  in.close();

  return 0;
}

5a.
/*ファイルをコピーして、大文字小文字を反対にする。
エラー検査あり*/
#include <iostream>
#include <fstream>
#include <cctype>
using namespace std;

int main(int argc, char *argv[])
{
  char ch;

  if(argc!=3) {
    cout << "使い方: COPYREV <入力ファイル> <出力ファイル>\n";
    return 1;
  }

  ifstream in(argv[1]);

  if(!in) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  ofstream out(argv[2]);

  if(!out) {
    cout << "出力ファイルが開けません";
    return 1;
  }

  while(!in.eof()) {
    ch = in.get();
    if(!in.good() && !in.eof()) return 1;
    if(!in.eof()) {
      if(islower(ch)) ch = toupper(ch);
      else ch = tolower(ch);
      out.put(ch);
      if(!out.good()) return 1;
    }
  };

  in.close();
  out.close();
  if(!in.good() && !out.good()) return 1;
  return 0;
}

5b.
// 文字を数える。エラー検査を行う。
#include <iostream>
#include <fstream>
#include <cctype>
using namespace std;

int alpha[26];

int main(int argc, char *argv[])
{
  char ch;

  if(argc!=2) {
    cout << "使い方: COUNT <入力ファイル>\n";
    return 1;
  }

  ifstream in(argv[1]);

  if(!in) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  // alpha[]の初期化
  int i;
  for(i=0; i<26; i++) alpha[i] = 0;

  while(!in.eof()) {
    ch = in.get();
    if(!in.good() && !in.eof()) return 1;
    if(isalpha(ch)) {   // 文字が見つかったら、数に入れる
      ch = toupper(ch); // 正規化
      alpha[ch-'A']++;  // 'A'-'A' == 0、'B'-'A' == 1など
    }
  };

  // 発生回数の表示
  for(i=0; i<26; i++) {
    cout << (char) ('A'+ i) << ": " << alpha[i] << "\n";
  }

  in.close();
  if(!in.good()) return 1;

  return 0;
}

【6】getポインタの位置を指定するにはseekg()、putポインタの位置を指定するにはseekp()を使います。

第9章：総合理解度チェック

【1】
#include <iostream>
#include <fstream>
#include <cstring>
using namespace std;

#define SIZE 40

class inventory {
  char item[SIZE]; // 品名
  int onhand;      // 在庫数量
  double cost;     // 原価
public:
  inventory(char *i, int o, double c)
  {
    strcpy(item, i);
    onhand = o;
    cost = c;
  }
  void store(fstream &stream);
  void retrieve(fstream &stream);
  friend ostream &operator<<(ostream &stream, inventory ob);
  friend istream &operator>>(istream &stream, inventory &ob);
};

ostream &operator<<(ostream &stream, inventory ob)
{
  stream << ob.item << ": 在庫数は: " << ob.onhand;
  stream << " 費用は: $" << ob.cost << "\n";

  return stream;
}

istream &operator>>(istream &stream, inventory &ob)
{
  cout << "品名を入力: ";
  stream >> ob.item;
  cout << "在庫数を入力: ";
  stream >> ob.onhand;
  cout << "原価を入力: ";
  stream >> ob.cost;

  return stream;
}

void inventory::store(fstream &stream)
{
  stream.write(item, SIZE);
  stream.write((char *) &onhand, sizeof(int));
  stream.write((char *) &cost, sizeof(double));
}

void inventory::retrieve(fstream &stream)
{
  stream.read(item, SIZE);
  stream.read((char *) &onhand, sizeof(int));
  stream.read((char *) &cost, sizeof(double));
}

int main()
{
  fstream inv("inv", ios::out | ios::binary); 
  int i;

  inventory pliers("ペンチ", 12, 4.95);
  inventory hammers("金づち", 5, 9.45);
  inventory wrenches("スパナ", 22, 13.90);
  inventory temp("", 0, 0.0);

  if(!inv) {
    cout << "出力ファイルが開けません\n";
    return 1;
  }
  // ファイルへ書き出す
  pliers.store(inv);
  hammers.store(inv);
  wrenches.store(inv);
  inv.close();

  // 入力用にオープン
  inv.open("inv", ios::in | ios::binary); 

  if(!inv) {
    cout << "入力ファイルが開けません\n";
    return 1;
  }

  do {
    cout << "Record # (-1 to quit): ";
    cin >> i;
    if(i == -1) break;
    inv.seekg(i*(SIZE+sizeof(int)+sizeof(double)), ios::beg);
    temp.retrieve(inv);
    cout << temp;
  } while(inv.good());

  inv.close();

  return 0;
}

【2】（省略）
