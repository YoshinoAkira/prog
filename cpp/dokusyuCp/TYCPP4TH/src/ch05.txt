■第5章：目次■
･････････････････････
●リスト第5章：前章の理解度チェック【4】
●リスト5.1：例【1】
●リスト5.1：例【2】
●リスト5.1：例【3】
●リスト5.1：例【4】
●リスト5.1：練習問題【1】
●リスト5.2：例【1】
●リスト5.2：例【2】
●リスト5.2：例【2】
●リスト5.2：練習問題【1】
●リスト5.2：練習問題【2】
●リスト5.3：例【1】
●リスト5.3：例【2】
●リスト5.3：例【2】
●リスト5.3：例【3】
●リスト5.3：例【4】
●リスト5.4：例【1】
●リスト5.4：例【2】
●リスト5.4：例【3】
●リスト5.4：例【4】
●リスト5.5：例【1】
●リスト5.5：練習問題【1】
●リスト第5章の理解度チェック【2】
●リスト第5章：総合理解度チェック【4】
･････････････････････

●リスト第5章：前章の理解度チェック【4】
class samp {
  int x;
public:
  samp(int n) { x = n; }
  int getx() { return x; }
};

●リスト5.1：例【1】
#include <iostream>
using namespace std;

class myclass {
  int x;
public:
  // コンストラクタを2とおりにオーバーロードする
  myclass() { x = 0; }      // 初期化値を指定しない
  myclass(int n) { x = n; } // 初期化値を指定する
  int getx() { return x; }
};

int main()
{
  myclass o1(10); // 初期値を指定して宣言する
  myclass o2;     // 初期値を設定せずに宣言する

  cout << "o1: " << o1.getx() << "\n";
  cout << "o2: " << o2.getx() << "\n";

  return 0;
}

●リスト5.1：例【2】
#include <iostream>
using namespace std;

class myclass {
  int x;
public:
  // コンストラクタを2とおりにオーバーロードする
  myclass() { x = 0; }      // 初期化値を指定しない
  myclass(int n) { x = n; } // 初期化値を指定する
  int getx() { return x; }
};

int main()
{
  // 初期値を設定せずに宣言する
  myclass o1[10];

  // 初期値を設定して宣言する
  myclass o2[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

  int i;

  for(i=0; i<10; i++) {
    cout << "o1[" << i << "]: " << o1[i].getx();
    cout << "\n";
    cout << "o2[" << i << "]: " << o2[i].getx();
    cout << "\n";
  }

  return 0;
}

●リスト5.1：例【3】
#include <iostream>
#include <cstdio> // sscanf()関数用にインクルードする
using namespace std;

class date {
  int day, month, year;
public:
  date(char *str);
  date (int m, int d, int y) {
    day = d;
    month = m;
    year = y;
  }
  void show() {
    cout << month << '/' << day << '/';
    cout << year << "\n";
  }
};
 
date::date(char *str)
{
  sscanf(str, "%d%*c%d%*c%d", &month, &day, &year);
}

int main()
{
  // 文字列を使用してdateオブジェクトを作成する
  date sdate("12/31/99");

  // 整数を使用してdateオブジェクトを作成する
  date idate(12, 31, 99);

  sdate.show();
  idate.show();
  return 0;
}


●リスト5.1：例【4】
#include <iostream>
using namespace std;

class myclass {
  int x;
public:
  // コンストラクタを2とおりにオーバーロードする
  myclass() { x = 0; }      // 初期化値を指定しない
  myclass(int n) { x = n; } // 初期化値を指定する
  int getx() { return x; }
  void setx(int n) { x = n; }
};

int main()
{
  myclass *p;
  myclass ob(10);      // 1つの変数を初期化する

  p = new myclass[10]; // ここでは初期値を使用できない
  if(!p) {
    cout << "メモリ割り当てエラー\n";
    return 1;
  }

  int i;

  // すべての要素をobに初期化する
  for(i=0; i<10; i++) p[i] = ob;
  for(i=0; i<10; i++) {
    cout << "p[" << i << "]: " << p[i].getx();
    cout << "\n";
  }

  return 0;
}

●リスト5.1：練習問題【1】
class strtype {
  char *p;
  int len;
public:
  char *getstring() { return p; }
  int getlength() { return len; }
};

●リスト5.2：例【1】
/* このプログラムでは「安全な」配列クラスを作成する
   配列を記憶する領域を動的に割り当てるので、
   配列オブジェクトを使用してほかの配列オブジェクトを
   初期化する際に、コピーコンストラクタを使用して
   メモリを割り当てる
*/
#include <iostream>
#include <cstdlib>
using namespace std;

class array {
  int *p;
  int size;
public:
  array(int sz) { // コンストラクタ
    p = new int[sz];
    if(!p) exit(1);
    size = sz;
    cout << "「通常の」コンストラクタを使う\n";
  }
  ~array() {delete [] p;}

  // コピーコンストラクタ
  array(const array &a);

  void put(int i, int j) {
    if(i>=0 && i<size) p[i] = j;
  }
  int get(int i) {
    return p[i];
  }
};

/* コピーコンストラクタ

   このコンストラクタでは、コピー用にメモリを割り当て、
   このメモリのアドレスをpに割り当てる
   したがって、pが元のオブジェクトと同じ動的割り当てメモリを
   参照することはない
*/
array::array(const array &a) {
  int i;

  size = a.size;
  p = new int[a.size];  // コピー用のメモリを割り当てる
  if(!p) exit(1);
  for(i=0; i<a.size; i++) p[i] = a.p[i]; // 内容をコピーする
  cout << "コピーコンストラクタを使う\n";
}

int main()
{ 
  array num(10);  // 「通常の」コンストラクタを呼び出す
  int i;

  // 配列に値を格納する
  for(i=0; i<10; i++) num.put(i, i);

  // numの内容を表示する
  for(i=9; i>=0; i--) cout << num.get(i);
  cout << "\n";

  // ほかの配列を作成し、numを使用して初期化する
  array x = num;  // コピーコンストラクタを呼び出す

  // xを表示する
  for(i=0; i<10; i++) cout << x.get(i);
  cout << "\n";

  return 0;
}


●リスト5.2：例【2】
// このプログラムにはエラーがある
#include <iostream>
#include <cstring>
#include <cstdlib>
using namespace std;

class strtype {
  char *p;
public:
  strtype(char *s);
  ~strtype() { delete [] p; }
  char *get() { return p; }
};

strtype::strtype(char *s)
{
  int l;

  l = strlen(s)+1;

  p = new char [l];
  if(!p) {
    cout << "メモリ割り当てエラー\n";
    exit(1);
  }

  strcpy(p, s);
}

void show(strtype x)
{
  char *s;
   
  s = x.get();
  cout << s << "\n";
}

int main()
{
  strtype a("Hello"), b("There");

  show(a);
  show(b);

  return 0;
}

●リスト5.2：例【2】
/* このプログラムでは、コピーコンストラクタを使用して
   strtypeオブジェクトを関数に渡す */
#include <iostream>
#include <cstring>
#include <cstdlib>
using namespace std;

class strtype {
  char *p;
public:
  strtype(char *s);           // コンストラクタ
  strtype(const strtype &o);  // コピーコンストラクタ
  ~strtype() { delete [] p; } // デストラクタ
  char *get() { return p; }
};

// 「通常」のコンストラクタ
strtype::strtype(char *s)
{
  int l;

  l = strlen(s)+1;

  p = new char [l];
  if(!p) {
    cout << "メモリ割り当てエラー\n";
    exit(1);
  }

  strcpy(p, s);
}

// コピーコンストラクタ
strtype::strtype(const strtype &o)
{
  int l;

  l = strlen(o.p)+1;

  p = new char [l]; // 新しいコピーオブジェクトにメモリを割り当てる
  if(!p) {
    cout << "メモリ割り当てエラー\n";
    exit(1);
  }

  strcpy(p, o.p); // 文字列をコピーオブジェクトにコピーする
}

void show(strtype x)
{
  char *s;
   
  s = x.get();
  cout << s << "\n";
}

int main()
{
  strtype a("Hello"), b("There");

  show(a);
  show(b);

  return 0;
}

●リスト5.2：練習問題【1】
#include <iostream>
using namespace std;

class myclass {
public:
  myclass();
  myclass(const myclass &o);
  myclass f();
};

// 通常のコンストラクタ
myclass::myclass()
{
  cout << "通常のコンストラクタ呼び出し\n";
}

// コピーコンストラクタ
myclass::myclass(const myclass &o)
{
  cout << "コピーコンストラクタ呼び出し\n";
}

// オブジェクトを返す
myclass myclass::f()
{
  myclass temp;
  return temp;
}

int main()
{
  myclass obj;
  obj = obj.f();
  return 0;
}

●リスト5.2：練習問題【2】
// このプログラムにはエラーがある
#include <iostream>
#include <cstdlib>
using namespace std;

class myclass {
  int *p;
public:
  myclass(int i);
  ~myclass() { delete p; }
  friend int getval(myclass o);
};

myclass::myclass(int i)
{
  p = new int;

  if(!p) {
    cout << "メモリ割り当てエラー\n";
    exit(1);
  }

  *p = i;

}

int getval(myclass o)
{ 
  return *o.p; // 値を取得する
}

int main()
{
  myclass a(1), b(2);

  cout << getval(a) << " " << getval(b);
  cout << "\n";
  cout << getval(a) << " " << getval(b);
  cout << "\n";

  return 0;
}

●リスト5.3：例【1】
// デフォルト引数の単純な例
#include <iostream>
using namespace std;

void f(int a=0, int b=0)
{
  cout << "a: " << a << ", b: " << b;
  cout << "\n";
}

int main()
{
  f();
  f(10);
  f(10, 99);

  return 0;
}

●リスト5.3：例【2】
// オーバーロード関数を使用して四角形の面積を計算する
#include <iostream>
using namespace std;

// 正方形ではない四角形の面積を返す
double rect_area(double length, double width)
{
  return length * width;
}

// 正方形の面積を返す
double rect_area(double length)
{
  return length * length;
}

int main()
{
  cout << "10 x 5.8 の長方形の面積: ";
  cout << rect_area(10.0, 5.8) << "\n";
  cout << "10 x 10 の正方形の面積: ";
  cout << rect_area(10.0) << "\n";

  return 0;
}

●リスト5.3：例【2】
// デフォルト引数を使用して四角形の面積を計算する
#include <iostream>
using namespace std;

// 四角形の面積を返す
double rect_area(double length, double width = 0)
{
  if(!width) width = length;
  return length * width;
}

int main()
{
  cout << "10 x 5.8 の長方形の面積: ";
  cout << rect_area(10.0, 5.8) << "\n";
  cout << "10 x 10 の正方形の面積: ";
  cout << rect_area(10.0) << "\n";

  return 0;
}

●リスト5.3：例【3】
#include <iostream>
using namespace std;
class myclass {
  int x;
public:
  /* myclassクラスのコンストラクタをオーバーロードする代わりに、
     デフォルト引数を使用する */
  myclass(int n = 0) { x = n; }
  int getx() { return x; }
};

int main()
{
  myclass o1(10); // 初期値を指定して宣言する
  myclass o2; // 初期値を指定せずに宣言する

  cout << "o1: " << o1.getx() << "\n";
  cout << "o2: " << o2.getx() << "\n";

  return 0;
}

●リスト5.3：例【4】
#include <iostream>
#include <cctype>
using namespace std;

const int ignore = 0;
const int upper = 1;
const int lower = 2;

void print(char *s, int how = -1);

int main()
{
  print("Hello There\n", ignore);
  print("Hello There\n", upper);
  print("Hello There\n"); // 大文字で表示を続ける
  print("Hello there\n", lower);
  print("That's all\n");  // 小文字で表示を続ける

  return 0;
}
/* 指定されたケースを使用して文字列を表示する
   指定されていない場合は前回のケースを使用する
*/
void print(char *s, int how)
{
  static int oldcase = ignore;

  // 指定されていない場合は前回のケースを使用する
  if(how<0) how = oldcase; 
  while(*s) {
    switch(how) {
      case upper: cout << (char) toupper(*s);
        break;
      case lower: cout << (char) tolower(*s);
        break;
      default: cout << *s;
    }
    s++;
  }
  oldcase = how;
}

●リスト5.4：例【1】
// このプログラムにはあいまいさによるエラーがある
#include <iostream>
using namespace std;

float f(float i)
{
  return i / 2.0;
}

double f(double i)
{
  return i / 3.0;
}

int main()
{
  float x = 10.09;
  double y = 10.09;
  cout << f(x);  // あいまいではない。f(float)を使用する
  cout << f(y);  // あいまいではない。f(double)を使用する
  cout << f(10); // あいまい。10をdoubleとfloatのどちらにでも変換できる

  return 0;
}

●リスト5.4：例【2】
// このプログラムにはあいまいさによるエラーがある
#include <iostream>
using namespace std;

void f(unsigned char c)
{
  cout << c;
}
 
void f(char c)
{
  cout << c;
}

int main()
{
  f('c');
  f(86); // どちらのf()関数を呼び出せばよいか？

  return 0;
}

●リスト5.4：例【3】
// あいまいなプログラム
#include <iostream>
using namespace std;

int f(int a, int b)
{
  return a+b;
}

// 本質的にあいまいな関数
int f(int a, int &b)
{
  return a-b;
}

int main()
{
  int x=1, y=2;
  cout << f(x, y); // どちらのf()関数を呼び出せばよいか？
  return 0;
}

●リスト5.4：例【4】
// デフォルト引数とオーバーロードによるあいまいさ
#include <iostream>
using namespace std;

int f(int a)
{
  return a*a;
}

int f(int a, int b = 0)
{
  return a*b;
}

int main()
{
  cout << f(10, 2); // f(int, int)を呼び出す
  cout << f(10);    // あいまい。f(int)とf(int, int)のどちらを
                    // 呼び出せばよいか？

  return 0;
}

●リスト5.5：例【1】
/* オーバーロード関数に関数ポインタを
   使用する例 */
#include <iostream>
using namespace std;

// count個の空白を出力する
void space(int count) 
{
  for( ; count; count--) cout << ' ';
}

// count個のchを出力する
void space(int count, char ch) 
{
  for( ; count; count--) cout << ch;
}

int main()
{
  /* 1つの整数仮引数を受け取るvoid関数への
     ポインタを作成する */
  void (*fp1)(int);

  /* 1つの整数仮引数と1つの文字仮引数を
     受け取るvoid関数へのポインタを作成する */
  void (*fp2)(int, char);

  fp1 = space;  // space(int)関数のアドレスを取得する
  fp2 = space;  // space(int, char)関数のアドレスを取得する

  fp1(22);      // 22個の空白を出力する
  cout << "|\n";
  fp2(30, 'x'); // 30個のxを出力する
  cout << "|\n";

  return 0;
}

●リスト5.5：練習問題【1】
int dif(int a, int b)
{
  return a-b;
}

float dif(float a, float b)
{
  return a-b;
}

●リスト第5章の理解度チェック【2】
class samp {
  int a;
public:
  samp(int i) { a = i; }
  // ...
};

// ...

int main()
{
  samp x, y(10);
 
  // ...
}

●リスト第5章：総合理解度チェック【4】
class samp {
  int a;
public:
  // コンストラクタ関数を追加する
  int get_a() { return a; }
};

int main()
{
  samp ob(88);      // obのaを88に初期化する
  samp obarray[10]; // 初期化しない10要素の配列

  // ...
}
