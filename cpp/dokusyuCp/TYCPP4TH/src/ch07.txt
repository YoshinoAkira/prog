■第7章：目次■
･････････････････････
●リスト第7章：前章の理解度チェック【4】
●リスト7.1：例【1】
●リスト7.1：例【2】
●リスト7.1：例【3】
●リスト7.1：例【4】
●リスト7.1：練習問題【1】
●リスト7.2：例【1】
●リスト7.2：例【2】
●リスト7.2：例【3】
●リスト7.3：例【1】
●リスト7.3：例【2】
●リスト7.3：例【3】
●リスト7.3：例【4】
●リスト7.3：例【5】
●リスト7.3：練習問題【1】
●リスト7.3：練習問題【2】
●リスト7.4：例【1】
●リスト7.4：例【2】
●リスト7.4：例【3】
●リスト7.4：練習問題【1】
●リスト7.4：練習問題【2】
●リスト7.5：例【1】
●リスト第7章の理解度チェック【5】
●リスト第7章の理解度チェック【6】
●リスト第7章：総合理解度チェック【3】
･････････････････････

●リスト第7章：前章の理解度チェック【4】
#include <iostream>
using namespace std;

class array {
  int nums[10];
public:
  array();
  void set(int n[10]);
  void show();
  array operator+(array ob2);
  array operator-(array ob2);
  int operator==(array ob2);
};

array::array()
{
  int i;

  for(i=0; i<10; i++) nums[i] = 0;
}  

void array::set(int *n)
{
  int i;
  
  for(i=0; i<10; i++) nums[i] = n[i];
}

void array::show()
{
  int i;

  for(i=0; i<10; i++)
    cout << nums[i] << ' ';

  cout << "\n";
}

// 演算子関数を補う
 
int main()
{
  array o1, o2, o3;
  int i[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

  o1.set(i);
  o2.set(i);

  o3 = o1 + o2;
  o3.show();

  o3 = o1 - o3;
  o3.show();

  if(o1==o2) cout << "o1とo2は同じ\n";
  else cout << "o1とo2は異なる\n";

  if(o1==o3) cout << "o1とo3は同じ\n";
  else cout << "o1とo3は異なる\n";

  return 0;
}

●リスト7.1：例【1】
#include <iostream>
using namespace std;

class base {
  int x;
public:
  void setx(int n) { x = n; }
  void showx() { cout << x << "\n"; }
};

// publicとして継承する
class derived : public base {
  int y;
public:
  void sety(int n) { y = n; }
  void showy() { cout << y << "\n"; }
};
 
int main()
{
  derived ob;

  ob.setx(10); // 基本クラスのメンバにアクセス
  ob.sety(20); // 派生クラスのメンバにアクセス
  ob.showx();  // 基本クラスのメンバにアクセス
  ob.showy();  // 派生クラスのメンバにアクセス

  return 0;
}

●リスト7.1：例【2】
class base {
  int x;
public:
  void setx(int n) { x = n; }
  void showx() { cout << x << "\n"; }
};

// publicとして継承。エラーあり!
class derived : public base {
  int y;
public:
  void sety(int n) { y = n; }

  /* 基本クラスの非公開メンバにはアクセスできない。
     xは基本クラスの非公開メンバであり、
     派生クラス内では使用できない。*/
  void show_sum() { cout << x+y << "\n"; } // エラー!

  void showy() { cout << y << "\n"; }
};

●リスト7.1：例【3】
// このプログラムにはエラーがある
#include <iostream>
using namespace std;

class base {
  int x;
public:
  void setx(int n) { x = n; }
  void showx() { cout << x << "\n"; }
};

// 基本クラスをprivateとして継承する
class derived : private base {
  int y;
public:
  void sety(int n) { y = n; }
  void showy() { cout << y << "\n"; }
};
 
int main()
{
  derived ob;

  ob.setx(10); // エラー - 派生クラスに対して非公開
  ob.sety(20); // 派生クラスのメンバにアクセス - OK

  ob.showx();  // エラー - 派生クラスに対して非公開
  ob.showy();  // 派生クラスのメンバにアクセス - OK

  return 0;
}

●リスト7.1：例【4】
// このプログラムは修正済み
#include <iostream>
using namespace std;

class base {
  int x;
public:
  void setx(int n) { x = n; }
  void showx() { cout << x << "\n"; }
};

// 基本クラスをprivateとして継承する
class derived : private base {
  int y;
public:
  // 派生クラス内からはsetxにアクセスできる
  void setxy(int n, int m) { setx(n); y = m; }
  // 派生クラス内からはshowxにアクセスできる
  void showxy() { showx(); cout << y << "\n"; }
};
 
int main()
{
  derived ob;

  ob.setxy(10, 20); 
  ob.showxy();

  return 0;
}

●リスト7.1：練習問題【1】
#include <iostream>
using namespace std;

class mybase {
  int a, b;
public:
  int c;
  void setab(int i, int j) { a = i; b = j; }
  void getab(int &i, int &j) { i = a; j = b; }
};

class derived1 : public mybase {
//  ...
};

class derived2 : private mybase {
//  ...
};

int main()
{
  derived1 o1;
  derived2 o2;
  int i, j;
  

  //  ...
}

●リスト7.2：例【1】
#include <iostream>
using namespace std;

class samp {
  // デフォルトにより非公開
  int a;
protected: // samp以外には非公開
  int b;
public:
  int c; 
  samp(int n, int m) { a = n; b = m; }
  int geta() { return a; }
  int getb() { return b; }
};

int main()
{
  samp ob(10, 20);

  // ob.b = 99; エラー! bは被保護。したがって非公開
  ob.c = 30; // OK。cは公開

  cout << ob.geta() << ' ';
  cout << ob.getb() << ' ' << ob.c << "\n";

  return 0;
}

●リスト7.2：例【2】
#include <iostream>
using namespace std;

class base {
protected:  // 基本クラス以外には非公開ながら
  int a, b; // 派生クラスからはアクセスできる
public:
  void setab(int n, int m) { a = n; b = m; }
};

class derived : public base {
  int c;
public:
  void setc(int n) { c = n; }
  // この関数は、基本クラスのaとbにアクセスできる
  void showabc() { 
    cout << a << ' ' << b << ' ' << c << "\n"; 
  }
};

int main()
{
  derived ob;

  /* aとbは、ここではアクセスできない。
     基本クラスとその派生クラス以外には非公開 */
  ob.setab(1, 2); 

  ob.setc(3);
  
  ob.showabc(); 

  return 0;
}

●リスト7.2：例【3】
// このプログラムはコンパイルされない
#include <iostream>
using namespace std;

class base {
protected:    // 基本クラス以外では非公開ながら
  int a, b;   // 派生クラスからはアクセスできる
public:
  void setab(int n, int m) { a = n; b = m; }
};

class derived : protected base { // protectedとして継承
  int c;
public:
  void setc(int n) { c = n; }
  // この関数は基本クラスのaとbにアクセスできる
  void showabc() { 
    cout << a << ' ' << b << ' ' << c << "\n";
  }
};

int main()
{
  derived ob;

  // エラー：setab()は基本クラスの被保護メンバ
  ob.setab(1, 2); // ここからはsetab()にアクセスできない

  ob.setc(3);
  
  ob.showabc();

  return 0;
}

●リスト7.3：例【1】
#include <iostream>
using namespace std;

class base {
public:
  base() { cout << "baseクラスのコンストラクタ呼び出し\n"; }
  ~base() { cout << "baseクラスのデストラクタ呼び出し\n"; }
};

class derived : public base {
public:
  derived() { cout << "derivedクラスのコンストラクタ呼び出し\n"; } 
  ~derived() { cout << "derivedクラスのデストラクタ呼び出し\n"; }
};

int main()
{
  derived o;
  return 0;
}

●リスト7.3：例【2】
#include <iostream>
using namespace std;

class base {
public:
  base() { cout << "baseクラスのコンストラクタ呼び出し\n"; }
  ~base() { cout << "baseクラスのデストラクタ呼び出し\n"; }
};

class derived : public base {
  int j;
public:
  derived(int n) { 
    cout << "derivedクラスのコンストラクタ呼び出し\n"; 
    j = n;
  } 
  ~derived() { cout << "derivedクラスのデストラクタ呼び出し\n"; }
  void showj() { cout << j << '\n'; }
};

int main()
{
  derived o(10);

  o.showj();

  return 0;
}

●リスト7.3：例【3】
#include <iostream>
using namespace std;

class base {
  int i;
public:
  base(int n) { 
    cout << "baseクラスのコンストラクタ呼び出し\n"; 
    i = n;
  }
  ~base() { cout << "baseクラスのデストラクタ呼び出し\n"; }
  void showi() { cout << i << "\n"; }
};

class derived : public base {
  int j;
public:
  derived(int n) : base(n) { // 引数を基本クラスに渡す
    cout << "derivedクラスのコンストラクタ呼び出し\n"; 
    j = n;
  } 
  ~derived() { cout << "derivedクラスのデストラクタ呼び出し\n"; }
  void showj() { cout << j << "\n"; }
};

int main()
{
  derived o(10);

  o.showi();
  o.showj();
  
  return 0;
}

●リスト7.3：例【4】
#include <iostream>
using namespace std;

class base {
  int i;
public:
  base(int n) { 
    cout << "baseクラスのコンストラクタ呼び出し\n"; 
    i = n;
  }
  ~base() { cout << "baseクラスのデストラクタ呼び出し\n"; }
  void showi() { cout << i << "\n"; }
};

class derived : public base {
  int j;
public:
  derived(int n, int m) : base(m) { // 引数を基本クラスに渡す
    cout << "derivedクラスのコンストラクタ呼び出し\n"; 
    j = n;
  } 
  ~derived() { cout << "derivedクラスのデストラクタ呼び出し\n"; }
  void showj() { cout << j << "\n"; }
};

int main()
{
  derived o(10, 20);

  o.showi();
  o.showj();
  
  return 0;
}

●リスト7.3：例【5】
class base {
  int i;
public:
  base(int n) { 
    cout << "baseクラスのコンストラクタ呼び出し\n"; 
    i = n;
  }
  ~base() { cout << "baseクラスのデストラクタ呼び出し\n"; }
  void showi() { cout << i << "\n"; }
};

class derived : public base {
  int j;
public:
  derived(int n) : base(n) { // 引数を基本クラスを渡す
    cout << "derivedクラスのコンストラクタ呼び出し\n"; 
    j = 0; // ここではnを使用しない
  } 
  ~derived() { cout << "derivedクラスのデストラクタ呼び出し\n"; }
  void showj() { cout << j << "\n"; }
};

●リスト7.3：練習問題【1】
#include <iostream>
#include <cstring>
using namespace std;

class mybase {
  char str[80];
public:
  mybase(char *s) { strcpy(str, s); }
  char *get() { return str; }
};

class myderived : public mybase {
  int len;
public:
  // ここにmyderived()を追加する
  int getlen() { return len; }
  void show() { cout << get() << "\n"; }
};

int main()
{
  myderived ob("hello");

  ob.show();
  cout << ob.getlen() << "\n";
 
  return 0;
}

●リスト7.3：練習問題【2】
#include <iostream>
using namespace std;

// 各種車両の基本クラス
class vehicle {
  int num_wheels;
  int range;
public:
  vehicle(int w, int r) 
  {
    num_wheels = w; range = r;
  }
  void showv() 
  {
    cout << "車輪の数: " << num_wheels << "\n";
    cout << "走行距離: " << range << "\n";
  }
};

class car : public vehicle {
  int passengers;
public:
  // car()コンストラクタをここに挿入
  void show()
  {
    showv();
    cout << "乗車定員: " << passengers << "\n";
  }
};

class truck : public vehicle {
  int loadlimit;
public:
  // truck()コンストラクタをここに挿入
  void show()
  {
    showv();
    cout << "積載量: " << loadlimit << "\n";
  }
};

int main()
{
  car c(5, 4, 500);
  truck t(30000, 12, 1200);

  cout << "乗用車: \n";
  c.show();
  cout << "\nトラック:\n";
  t.show();

  return 0;
}

●リスト7.4：例【1】
// 多重継承
#include <iostream>
using namespace std;

class B1 {
  int a;
public:
  B1(int x) { a = x; }
  int geta() { return a; }
};

// 直接基本クラスを継承する
class D1 : public B1 {
  int b;
public:
  D1(int x, int y) : B1(y) // B1にyを渡す
  {
    b = x;
  }
  int getb() { return b; }
};

// 派生クラスと間接基本クラスを継承する
class D2 : public D1 { 
  int c;
public:
  D2(int x, int y, int z) : D1(y, z) // D1に引数を渡す
  {
    c = x;
  }

  /* 2つの基本クラスがpublicとして継承されているため、
     D2はB1とD1両方の公開要素にアクセスできる */
  void show() {
    cout << geta() << ' ' << getb() << ' ';
    cout << c << "\n";
  }
};
int main()
{
  D2 ob(1, 2, 3);

  ob.show();
  // geta()とgetb()は、依然、公開のまま
  cout << ob.geta() << ' ' << ob.getb() << "\n";

  return 0;
}

●リスト7.4：例【2】
#include <iostream>
using namespace std;

// 1つ目の基本クラスを作成
class B1 {
  int a;
public:
  B1(int x) { a = x; }
  int geta() { return a; }
};

// 2つ目の基本クラスを作成
class B2 {
  int b;
public:
  B2(int x) 
  {
    b = x;
  }
  int getb() { return b; }
};

// 2つの基本クラスを直接継承
class D : public B1, public B2 { 
  int c;
public:
  // zとyをB1とB2に直接渡す
  D(int x, int y, int z) : B1(z), B2(y)
  {
    c = x;
  }

  /* 2つの基本クラスがpublicとして継承されたため、
     DはB1とB2の両方の公開要素にアクセスできる */
  void show() {
    cout << geta() << ' ' << getb() << ' ';
    cout << c << "\n";
  }
};

int main()
{
  D ob(1, 2, 3);

  ob.show();

  return 0;
}

●リスト7.4：例【3】
#include <iostream>
using namespace std;

class B1 {
public:
  B1() { cout << "B1のコンストラクタ呼び出し\n"; }
  ~B1() { cout << "B1のデストラクタ呼び出し\n"; }
};

class B2 {
  int b;
public:
  B2() { cout << "B2のコンストラクタ呼び出し\n"; }
  ~B2() { cout << "B2のデストラクタ呼び出し\n"; }
};

// 2つの基本クラスを継承
class D : public B1, public B2 { 
public:
  D() { cout << "Dのコンストラクタ呼び出し\n"; }
  ~D() { cout << "Dのデストラクタ呼び出し\n"; }
};

int main()
{
  D ob;

  return 0;
}

●リスト7.4：練習問題【1】
#include <iostream>
using namespace std;

class A {
public:
  A() { cout << "Aのコンストラクタ呼び出し\n"; }
  ~A() { cout << "Aのデストラクタ呼び出し\n"; }
};

class B {
public:
  B() { cout << "Bのコンストラクタ呼び出し\n"; }
  ~B() { cout << "Bのデストラクタ呼び出し\n"; }
};

class C : public A, public B {
public:
  C() { cout << "Cのコンストラクタ呼び出し\n"; }
  ~C() { cout << "Cのデストラクタ呼び出し\n"; }
};

int main()
{
  C ob;

  return 0;
}

●リスト7.4：練習問題【2】
#include <iostream>
using namespace std;

class A {
  int i;
public:
  A(int a) { i = a; }
};

class B {
  int j;

public:
  B(int a) { j = a; }
};

class C : public A, public B {
  int k;
public:
  /* C()を作成する。kを初期化し、
     A()とB()の両方に引数を渡すこと */
};

●リスト7.5：例【1】
// このプログラムは仮想基本クラスを使用する
#include <iostream>
using namespace std;

class base {
public:
  int i;
};

// 基本クラスをvirtualとして継承する
class derived1 : virtual public base {
public:
  int j;
};

// ここでも、基本クラスをvirtualとして継承する
class derived2 : virtual public base {
public:
  int k;
};

/* derived3は、derived1とderived2の両方を継承しているが、
   基本クラスのコピーは1つしかない */
class derived3 : public derived1, public derived2 {
public:
  int product() { return i * j * k; }
};

int main()
{
  derived3 ob;

  ob.i = 10; // コピーが1つのため、あいまいではない
  ob.j = 3;
  ob.k = 5;

  cout << "積は " << ob.product() << "\n";

  return 0;
}

●リスト第7章の理解度チェック【5】
#include <iostream>
using namespace std;

class planet {
protected:
  double distance; // 太陽からの距離（マイル数）
  int revolve;     // 日数
public:
  planet(double d, int r) { distance = d; revolve = r; }
};

class earth : public planet {
  double circumference; // 軌道の円周
public:
  /* earth(double d, int r)を作成する。距離と
     公転日数をplanetに渡し、軌道の円周を計算させる
     （ヒント：円周＝2r*3.1416）
  */
  /* この情報を表示するshow()という関数を作成する */
};

int main()
{
  earth ob(93000000, 365);

  ob.show();

  return 0;
}

●リスト第7章の理解度チェック【6】
/* 車両階層の変形。しかし、このプログラムには
   エラーが含まれているので、それを正すこと。
   ヒント：現在のままコンパイルして、どのような
   エラーメッセージが出るか調べる
*/
#include <iostream>
using namespace std;

// 各種車両の基本クラス
class vehicle {
  int num_wheels;
  int range;
public:
  vehicle(int w, int r)
  {
    num_wheels = w; range = r;
  }
  void showv()
  {
    cout << "車輪の数: " << num_wheels << "\n";
    cout << "走行距離: " << range << "\n";
  }
};

enum motor {gas, electric, diesel};

class motorized : public vehicle {
  enum motor mtr;
public:
  motorized(enum motor m, int w, int r) : vehicle(w, r)
  {
    mtr = m;
  }
  void showm() { 
    cout << "エンジン: ";
    switch(mtr) {
      case gas : cout << "ノーマル\n";
        break;
      case electric : cout << "電気\n";
        break;
      case diesel : cout << "ディーゼル\n";
        break;
    }
  }
};

class road_use : public vehicle {
  int passengers;
public:
  road_use(int p, int w, int r) : vehicle(w, r)
  {
    passengers = p;
  }
  void showr()
  {
    cout << "乗車定員: " << passengers << "\n";
  }
};

enum steering { power, rack_pinion, manual };

class car : public motorized, public road_use {
  enum steering strng;
public:
  car(enum steering s, enum motor m, int w, int r, int p) :
    road_use(p, w, r), motorized(m, w, r), vehicle(w, r)
  {
    strng = s;
  }
  void show() {
    showv(); showr(); showm();
    cout << "ハンドル: ";
    switch(strng) {
      case power : cout << "パワー\n";
        break;
      case rack_pinion : cout << "ラックアンドピニオン\n";
        break;
      case manual : cout << "マニュアル\n";
        break;
    }
  }
};
  
int main()
{
  car c(power, gas, 4, 500, 5);

  c.show();

  return 0;
}

●リスト第7章：総合理解度チェック【3】
/* +、-、=をcoordクラスに関してオーバーロードし、
   そのcoordをquadの基本クラスとして使用する */
#include <iostream>
using namespace std;

class coord {
public:
  int x, y; //  座標
  coord() { x=0; y=0; }
  coord(int i, int j) { x=i; y=j; }
  void get_xy(int &i, int &j) { i=x; j=y; }
  coord operator+(coord ob2);
  coord operator-(coord ob2);
  coord operator=(coord ob2);
};

// +をcoordクラスに関してオーバーロードする
coord coord::operator+(coord ob2)
{
  coord temp;

  cout << "coord operator+()を使用\n";

  temp.x = x + ob2.x;
  temp.y = y + ob2.y;

  return temp;
}

// -をcoordクラスに関してオーバーロードする
coord coord::operator-(coord ob2)
{
  coord temp;

  cout << "coord operator-()を使用\n";

  temp.x = x - ob2.x;
  temp.y = y - ob2.y;

  return temp;
}

// =をcoordクラスに関してオーバーロードする
coord coord::operator=(coord ob2)
{
  cout << "coord operator=()を使用\n";

  x = ob2.x;
  y = ob2.y;

  return *this; // 代入先のオブジェクトを返す
}

class quad : public coord {
  int quadrant;
public:
  quad() { x = 0; y = 0; quadrant = 0; }
  quad(int x, int y) : coord(x, y)
  {
    if(x>=0 && y>=0) quadrant = 1;
    else if(x<0 && y>=0) quadrant = 2;
    else if(x<0 && y<0) quadrant = 3;
    else quadrant = 4;
  }
  void showq()
  {  
     cout << "象限を示す: " << quadrant << "\n";
  }
  quad operator=(coord ob2);
};

quad quad::operator=(coord ob2)
{
  cout << "quad operator=()を使用\n";

  x = ob2.x;
  y = ob2.y;

  if(x>=0 && y>=0) quadrant = 1;
  else if(x<0 && y>=0) quadrant = 2;
  else if(x<0 && y<0) quadrant = 3;
  else quadrant = 4;

  return *this;
}
  
int main()
{
  quad o1(10, 10), o2(15, 3), o3;
  int x, y;

  o3 = o1 + o2; // 2つのオブジェクトの加算。演算子+()を呼ぶ
  o3.get_xy(x, y);
  o3.showq();
  cout << "(o1+o2) X: " << x << ", Y: " << y << "\n";

  o3 = o1 - o2; // 2つのオブジェクトの減算
  o3.get_xy(x, y);
  o3.showq();
  cout << "(o1-o2) X: " << x << ", Y: " << y << "\n";

  o3 = o1; // オブジェクトを代入する
  o3.get_xy(x, y);
  o3.showq();
  cout << "(o3=o1) X: " << x << ", Y: " << y << "\n";

  return 0;
}
